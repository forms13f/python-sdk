# coding: utf-8

"""
    SEC form 13F API

    API for SEC form filings such as 13F.

    The version of the OpenAPI document: 1.0.0
    Contact: forms13f@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ApiV1Form(BaseModel):
    """
    ApiV1Form
    """ # noqa: E501
    url: Optional[StrictStr] = Field(default=None, description="The URL of the form.")
    accession_number: Optional[StrictStr] = Field(default=None, description="The accession number of the form.")
    submission_type: Optional[StrictStr] = Field(default=None, description="The submission type of the form.")
    public_document_count: Optional[StrictInt] = Field(default=None, description="The public document count.")
    period_of_report: Optional[date] = Field(default=None, description="The period of the report.")
    filed_as_of_date: Optional[date] = Field(default=None, description="The filed as of date.")
    date_as_of_change: Optional[date] = Field(default=None, description="The date as of change.")
    effectiveness_date: Optional[date] = Field(default=None, description="The effectiveness date.")
    cik: Optional[StrictStr] = Field(default=None, description="The Central Index Key (CIK).")
    company_name: Optional[StrictStr] = Field(default=None, description="The company name.")
    irs_number: Optional[StrictStr] = Field(default=None, description="The IRS number.")
    state_of_incorporation: Optional[StrictStr] = Field(default=None, description="The state of incorporation.")
    fiscal_year_end: Optional[StrictStr] = Field(default=None, description="The fiscal year end.")
    form_type: Optional[StrictStr] = Field(default=None, description="The form type.")
    sec_act: Optional[StrictStr] = Field(default=None, description="The SEC act.")
    sec_file_number: Optional[StrictStr] = Field(default=None, description="The SEC file number.")
    film_number: Optional[StrictStr] = Field(default=None, description="The film number.")
    business_address: Optional[StrictStr] = Field(default=None, description="The business address.")
    business_phone: Optional[StrictStr] = Field(default=None, description="The business phone.")
    table_value_total: Optional[StrictInt] = Field(default=None, description="The total value of the table.")
    table_entry_total: Optional[StrictInt] = Field(default=None, description="The total entry count of the table.")
    is_amendment: Optional[StrictBool] = Field(default=None, description="Indicates if the form is an amendment.")
    amendment_type: Optional[StrictStr] = Field(default=None, description="The type of amendment.")
    conf_denied_expired: Optional[StrictBool] = Field(default=None, description="Indicates if the confidentiality request was denied or expired.")
    conf_date_denied_expired: Optional[date] = Field(default=None, description="The date when the confidentiality request was denied or expired.")
    amendment_date_reported: Optional[date] = Field(default=None, description="The date when the amendment was reported.")
    __properties: ClassVar[List[str]] = ["url", "accession_number", "submission_type", "public_document_count", "period_of_report", "filed_as_of_date", "date_as_of_change", "effectiveness_date", "cik", "company_name", "irs_number", "state_of_incorporation", "fiscal_year_end", "form_type", "sec_act", "sec_file_number", "film_number", "business_address", "business_phone", "table_value_total", "table_entry_total", "is_amendment", "amendment_type", "conf_denied_expired", "conf_date_denied_expired", "amendment_date_reported"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiV1Form from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if public_document_count (nullable) is None
        # and model_fields_set contains the field
        if self.public_document_count is None and "public_document_count" in self.model_fields_set:
            _dict['public_document_count'] = None

        # set to None if business_address (nullable) is None
        # and model_fields_set contains the field
        if self.business_address is None and "business_address" in self.model_fields_set:
            _dict['business_address'] = None

        # set to None if business_phone (nullable) is None
        # and model_fields_set contains the field
        if self.business_phone is None and "business_phone" in self.model_fields_set:
            _dict['business_phone'] = None

        # set to None if table_value_total (nullable) is None
        # and model_fields_set contains the field
        if self.table_value_total is None and "table_value_total" in self.model_fields_set:
            _dict['table_value_total'] = None

        # set to None if table_entry_total (nullable) is None
        # and model_fields_set contains the field
        if self.table_entry_total is None and "table_entry_total" in self.model_fields_set:
            _dict['table_entry_total'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiV1Form from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "url": obj.get("url"),
            "accession_number": obj.get("accession_number"),
            "submission_type": obj.get("submission_type"),
            "public_document_count": obj.get("public_document_count"),
            "period_of_report": obj.get("period_of_report"),
            "filed_as_of_date": obj.get("filed_as_of_date"),
            "date_as_of_change": obj.get("date_as_of_change"),
            "effectiveness_date": obj.get("effectiveness_date"),
            "cik": obj.get("cik"),
            "company_name": obj.get("company_name"),
            "irs_number": obj.get("irs_number"),
            "state_of_incorporation": obj.get("state_of_incorporation"),
            "fiscal_year_end": obj.get("fiscal_year_end"),
            "form_type": obj.get("form_type"),
            "sec_act": obj.get("sec_act"),
            "sec_file_number": obj.get("sec_file_number"),
            "film_number": obj.get("film_number"),
            "business_address": obj.get("business_address"),
            "business_phone": obj.get("business_phone"),
            "table_value_total": obj.get("table_value_total"),
            "table_entry_total": obj.get("table_entry_total"),
            "is_amendment": obj.get("is_amendment"),
            "amendment_type": obj.get("amendment_type"),
            "conf_denied_expired": obj.get("conf_denied_expired"),
            "conf_date_denied_expired": obj.get("conf_date_denied_expired"),
            "amendment_date_reported": obj.get("amendment_date_reported")
        })
        return _obj


